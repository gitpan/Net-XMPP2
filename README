NAME
    Net::XMPP2 - An implementation of the XMPP Protocol

VERSION
    Version 0.06

SYNOPSIS
       use Net::XMPP2::Connection;

    or:

       use Net::XMPP2::IM::Connection;

    or:

       use Net::XMPP2::Client;

DESCRIPTION
    This is the head module of the Net::XMPP2 XMPP client protocol (as
    described in RFC 3920 and RFC 3921) framework.

    Net::XMPP2::Connection is a RFC 3920 conformant "XML" stream
    implementation for clients, which handles TCP connect up to the resource
    binding. And provides low level access to the XML nodes on the XML
    stream along with some high level methods to send the predefined XML
    stanzas.

    Net::XMPP2::IM::Connection is a more high level module, which is derived
    from Net::XMPP2::Connection. It handles all the instant messaging client
    functionality described in RFC 3921.

    Net::XMPP2::Client is a multi account client class. It manages
    connections to multiple XMPP accounts and tries to offer a nice high
    level interface to XMPP communication.

    For a list of "Supported extensions" see below.

    There are also other modules in this distribution, for example:
    Net::XMPP2::Util, Net::XMPP2::Writer, Net::XMPP2::Parser and those I
    forgot :-) Those modules might be helpful and/or required if you want to
    use this framework for XMPP.

    See also Net::XMPP2::Writer for a discussion about the brokeness of XML
    in the XMPP specification.

    If you have any questions or seek for help look below under "SUPPORT".

REQUIREMENTS
    One of the major drawbacks I see for Net::XMPP2 is the long list of
    required modules to make it work.

    AnyEvent
        For the I/O events and timers.

    XML::Writer
        For writing "XML".

    XML::Parser::Expat
        For parsing partial "XML" stuff.

    MIME::Base64
        For SASL authentication

    Authen::SASL
        For SASL authentication

    Net::LibIDN
        For stringprep profiles to handle JIDs.

    Net::SSLeay
        For SSL connections.

    Net::DNS
        For SRV RR lookups.

    Digest::SHA1
        For component authentication.

    And yes, all these are essential for XMPP communication. Even though
    'instant messaging' and 'presence' is a quite simple problem XMPP
    somehow was successful at making the task complicated enough to keep me
    busy for a long time. But all of that time wasn't only for the
    technology required to get it started, mostly it was for all the quirks,
    hacks and badly applied "XML" in the protocol which complicated the
    matter.

RELEASE NOTES
    Here are some notes to the last releases (release of this version is at
    top):

  Version
    * 0.06
        The event API has been changed a bit, it's possible to intercept
        events now, see Net::XMPP2::Event.

        Implemented the old legacy XEP-0078 (IQ authentication), see also
        Net::XMPP2::Ext for some notes about it.

        Some bugs with JID preps have been fixed and some functions for JID
        handling have been added to Net::XMPP2::Util.

        Reworked the subscription system a bit, you know have to reply with
        'subscribed' yourself, etc. (See also Net::XMPP2::IM::Connection
        about subscriptions).

        Implemented following new XEPs:

           - XEP-0082 - XMPP Date and Time Profiles
           - XEP-0091 - Delayed Delivery (legacy)
           - XEP-0092 - Software Version
           - XEP-0203 - Delayed Delivery (new)

        For further information about them see Net::XMPP2::Ext.

        I also started an implementation of XEP-0045 (Multi User Chats),
        please consult the test t/z_05_muc.t and the API at
        Net::XMPP2::Ext::MUC for the already working features. (Very basic
        MUCing should work, but there are lots of edges still with error
        reporting and all the other nice features).

        Also enhanced the message API a bit see Net::XMPP2::IM::Message and
        the methods of other classes that generate messages (eg. like
        "make_message").

        There has been a considerable efford in test writing. Added
        instructions about the test suite below in section "TEST SUITE".

        And another API change: "reply_iq_result" and "reply_iq_error" now
        attach a from attribute themselves (see Net::XMPP2::Connection).

    * 0.05
        I added some unit tests and fixed a lot of bugs. The unit tests are
        mostly for me (the AUTHOR) to not accidentally release a buggy
        version with too ugly show stopper bugs.

        The tests require network access to a jabber server and won't run
        unless you set the right environment variable. If you want to run
        these tests yourself you might want to take a look at
        Net::XMPP2::TestClient.

    * 0.04
        After realizing that in band registration in Net::XMPP2::Ext was
        already in in version 0.03 I finally had to implement it.

        While implementing in band registration I implemented XEP-0066: Out
        of Band Data. You can now receive and send URLs from and to others.
        See also Net::XMPP2::Ext::OOB.

        I also fixed some bugs in Net::XMPP2::Ext::Disco.

    * 0.03
        This release adds new events for attaching information to "XML"
        stanzas that are in transmission to the server. See also the events
        "send_*_hook" in Net::XMPP2::Connection.

        The event callbacks als don't have to return a true value anymore.
        What the return values do depends on the event now.

        The highlight of this release is the implementation of XEP-0114, the
        Jabber Component Protocol.

        It's possible to get a DOM tree from a Net::XMPP2::Node now and also
        to receive the original parsed "XML" from it, which should enable
        full access to the "XML" data that was received. This also allows
        easy integration with other XML Perl modules.

        You can also set the initial priority of the presence in
        Net::XMPP2::IM::Connection now.

        Please consult the Changes file for greater detail about bugfixes
        and new features.

    * older
        For older release notes please have a look at the Changes file or
        CPAN.

  TODO
    There are still lots of items on the TODO list (see also the TODO file
    in the distribution of Net::XMPP2).

TEST SUITE
    If you are a developer and want to test either a server or maybe just
    whether this module passes some basic tests you might want to run the
    developer test suite.

    This test suite is not enabled by default because it requires some human
    interaction to set it up, please see Net::XMPP2::TestClient for hints
    about the setup procedure for the test suite.

    I wrote the test suite mostly because I wanted to make sure I didn't
    break something essential before a release. The tests don't cover
    everything and I don't plan to write a test for every single function in
    the API, that would slow down development considerably for me. But I
    hope that some grave show stopper bugs in releases are prevented with
    this test suite.

    The tests are also useful if you want to test a server implementation.
    But there are maybe of course conformance issues with Net::XMPP2 itself,
    so if you find something where Net::XMPP2 doesn't conform to the XMPP
    RFCs or XEPs consult the BUGS section below.

    If you find a server that doesn't handle something correctly but you
    need to interact with it you are free to implement workarounds and send
    me a patch, or even ask me whether I might want to look into the issue
    (I can't gurantee anything here, but I want this module to be as
    interoperable as possible. But if the implementation of a workaround for
    some non-conformant software will complicate the code too much I'm
    probably not going to implement it.).

    Of course, if you find a bug in some server implementation don't forget
    to file a bugreport to them, one hack less in Net::XMPP2 means more time
    for bug fixing and improvements and new features.

Why (yet) another XMPP module?
    The main outstanding feature of this module in comparison to the other
    XMPP (aka Jabber) modules out there is the support for AnyEvent.
    AnyEvent permits you to use this module together with other I/O event
    based programs and libraries (ie. Gtk2 or Event).

    The other modules could often only be integrated in those applications
    or libraries by using threads. I decided to write this module because I
    think CPAN lacks an event based XMPP module. Threads are unfortunately
    not an alternative in Perl at the moment due the limited threading
    functionality they provide and the global speed hit. I also think that a
    simple event based I/O framework might be a bit easier to handle than
    threads.

    Another thing was that I didn't like the APIs of the other modules. In
    Net::XMPP2 I try to provide low level modules for speaking XMPP as
    defined in RFC 3920 and RFC 3921 (see also Net::XMPP2::Connection and
    Net::XMPP2::IM::Connection). But I also try to provide a high level API
    for easier usage for instant messaging tasks and clients (eg.
    Net::XMPP2::Client).

A note about TLS
    This module also supports TLS, as the specification of XMPP requires an
    implementation to support TLS.

    Maybe there are still some bugs in the handling of TLS in
    Net::XMPP2::Connection. So keep an eye on TLS with this module. If you
    encounter any problems it would be very helpful if you could debug them
    or at least send me a detailed report on how to reproduce the problem.

    (As I use this module myself I don't expect TLS to be completly broken,
    but it might break under different circumstances than I have here. Those
    circumstances might be a different load of data pumped through the TLS
    connection.)

    I mainly expect problems where available data isn't properly read from
    the socket or written to it. You might want to take a look at the
    "debug_send" and "debug_recv" events in Net::XMPP2::Connection.

Supported extensions
    See Net::XMPP2::Ext for a list.

EXAMPLES
    Following examples are included in this distribution:

    samples/simple_example_1
        This example script just connects to a server and sends a message
        and also displays incoming messages on stdout.

    samples/devcl/devcl
        This is a more advanced 'example'. It requires you to have Gtk2
        installed. It's mostly used by the author to implement
        proof-of-concepts. Currently you start the client like this:

           ../Net-XMPP2/samples/devcl/# perl ./devcl <jid> <password>

        The client's main window displays a protocol dump and there is
        currently a service discovery browser implemented.

        This might be a valuable source if you look for more real-world
        applications of Net::XMPP2.

    samples/conference_lister
        See below.

    samples/room_lister
        See below.

    samples/room_lister_stat
        These three scripts implements a global room scan.
        "conference_lister" takes a list of servers (the file is called
        "servers.xml" which has the same format as the xml file at
        <http://www.jabber.org/servers.xml>). It then scans all servers for
        chat room services and lists them into a file "conferences.stor",
        which is a Storable dump.

        "room_lister" then reads that file and queries all services for
        rooms, and then all rooms for their occupants. The output file is
        "room_data.stor", also a Storable dump, which in turn can be read
        with "room_lister_stat", which transform the data structures into
        something human readable.

        These scripts are a bit hacky and quite complicated, but maybe it's
        of any value for someone. You might note "EVQ.pm" in samples which
        is a module that handles request-throttling (You don't want to flood
        the server and risk getting the admins attention :).

    samples/simple_component
        This is a (basic) skeleton for a jabber component.

    samples/simple_oob_retriever
        This is a simple out of band file transfer receiver bot. It uses
        "curl" to fetch the files and also has the sample functionality of
        sending a file url for someone who sends the bot a 'send <filename>'
        message.

    samples/simple_register_example
        This is a example script which allows you to register, unregister
        and change your password for accounts. Execute it without arguments
        for more details.

    For others, which the author might forgot or didn't want to list here
    see the "samples/" directory.

    More examples will be included in later releases, please feel free to
    ask the "AUTHOR" if you have any questions about the API. There is also
    an IRC channel, see "SUPPORT".

AUTHOR
    Robin Redeker, "<elmex at ta-sa.org>", JID: "<elmex at jabber.org>"

BUGS
    Please note that I'm currently (July 2007) the only developer on this
    project and I'm very busy with my studies in Computer Science in Summer
    2007. If you want to ease my workload or want timely releases, please
    send me patches instead of bug reports or feature requests. I won't
    forget the reports or requests if you can't or didn't send patches, but
    I can't gurantee immediate response. But I will of course try to
    fix/implement them as soon as possible!

    Also try to be as precise as possible with bug reports, if you can't
    send a patch, it would be best if you find out which code doesn't work
    and tell me why.

    Please report any bugs or feature requests to "bug-net-xmpp2 at
    rt.cpan.org", or through the web interface at
    <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Net-XMPP2>. I will be
    notified and then you'll automatically be notified of progress on your
    bug as I make changes.

SUPPORT
    You can find documentation for this module with the perldoc command.

        perldoc Net::XMPP2

    You can also look for information at:

    * IRC: Net::XMPP2 IRC Channel
          IRC Network: http://freenode.net/
          Server     : chat.freenode.net
          Channel    : #net_xmpp2

          Feel free to join and ask questions!

    * Net::XMPP2 Project Site
        <http://www.ta-sa.org/>

    * AnnoCPAN: Annotated CPAN documentation
        <http://annocpan.org/dist/Net-XMPP2>

    * CPAN Ratings
        <http://cpanratings.perl.org/d/Net-XMPP2>

    * RT: CPAN's request tracker
        <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Net-XMPP2>

    * Search CPAN
        <http://search.cpan.org/dist/Net-XMPP2>

ACKNOWLEDGEMENTS
    Thanks to the XSF for the development of an open instant messaging
    protocol (even though it uses "XML").

    And thanks to all people who had to listen to my desperate curses about
    the brokenness/braindeadness of XMPP. Without you I would've never
    brought this module to a usable state.

    Thanks to:

    * Carlo von Loesch (aka lynX) <http://www.psyced.org/>
        For pointing out some typos.

COPYRIGHT & LICENSE
    Copyright 2007 Robin Redeker, all rights reserved.

    This program is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

